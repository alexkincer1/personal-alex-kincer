[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!!",
    "section": "",
    "text": "Welcome to my Quarto Warmup Website. This serves as a warmup site for CSC 324 at Georgetown College.\nYou can read a bit about me here.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites"
  },
  {
    "objectID": "articles/article_02.html",
    "href": "articles/article_02.html",
    "title": "Chapter 06 : Groups",
    "section": "",
    "text": "The standard JavaScript environment provides another data structure called Set. Like an instance of Map, a set holds a collection of values. Unlike Map, it does not associate other values with those—it just tracks which values are part of the set. A value can be part of a set only once—adding it again doesn’t have any effect.This is how your solution code will begin to format the rest of the variables into a collection.\n{class Group {   // Your code here. }}\n\nWrite a class called Group (since Set is already taken). Like Set, it has add, delete, and has methods. Its constructor creates an empty group, add adds a value to the group (but only if it isn’t already a member), delete removes its argument from the group (if it was a member), and has returns a Boolean value indicating whether its argument is a member of the group.\nUse the === operator, or something equivalent such as indexOf, to determine whether two values are the same.\n\nHere are a few hints to help the viewer figure out the problem:\n\nThe easiest way to do this is to store an array of group members in an instance property. The includes or indexOf methods can be used to check whether a given value is in the array.\nYour class’s constructor can set the member collection to an empty array. When add is called, it must check whether the given value is in the array or add it, for example with push, otherwise.\nDeleting an element from an array, in delete, is less straightforward, but you can use filter to create a new array without the value. Don’t forget to overwrite the property holding the members with the newly filtered version of the array.\nThe from method can use a for/of loop to get the values out of the iterable object and call add to put them into a newly created group.\n\n\nIn the remainder of the article we provide a detailed explanation of the solution-code.\n\n\nThe constructor method is a special method of a class for creating and initializing an object instance of that class. The purpose of a constructor is to create a new object and set values for any existing object properties.\nconstructor() {\n    this.members = [];\nThe add function returns a function. So when you call this: add (); what happens is the code ( ++i) executes and a function is returned. JavaScript, the exclamation mark (!) is a logical operator that negates the truth value of an expression. The push() method of Array instances adds the specified elements to the end of an array and returns the new length of the array.\nadd(value) {\n    if (!this.has(value)) {\n      this.members.push(value);\n    }\n}\n\n\n\nIn JavaScript, the delete operator is used to remove a property from an object. If the property’s value is an object and there are no more references to the object, the object held by that property is eventually released automatically. In addition, filter() is a built-in method that allows you to create a new array with all elements that pass a certain test provided by a function. The original array is not modified. Finally, The !== operator in JavaScript is called the strict inequality operator. It checks whether its two operands are not equal and returns a Boolean result.\ndelete(value) {\n    this.members = this.members.filter(v =&gt; v !== value);\n  }\n\n\n\nIn JavaScript, has is a method that is used to check whether a Set object contains a specified element or not. The has method returns a boolean value of true if the element is present in the Set object, and false otherwise.\nhas(value) {\n    return this.members.includes(value);\n  }\n\n\n\nA static variable is a special variable that you can use in a function, and it saves the data between calls, and it does not delete it between calls. The let, for, and return functions still provide the same outcomes as stated earlier.\nstatic from(collection) {\n    let group = new Group;\n    for (let value of collection) {\n      group.add(value);\n    }\n    return group;\n  }\nWe are done!"
  },
  {
    "objectID": "articles/article_02.html#introduction-to-the-problem",
    "href": "articles/article_02.html#introduction-to-the-problem",
    "title": "Chapter 06 : Groups",
    "section": "",
    "text": "The standard JavaScript environment provides another data structure called Set. Like an instance of Map, a set holds a collection of values. Unlike Map, it does not associate other values with those—it just tracks which values are part of the set. A value can be part of a set only once—adding it again doesn’t have any effect.This is how your solution code will begin to format the rest of the variables into a collection.\n{class Group {   // Your code here. }}\n\nWrite a class called Group (since Set is already taken). Like Set, it has add, delete, and has methods. Its constructor creates an empty group, add adds a value to the group (but only if it isn’t already a member), delete removes its argument from the group (if it was a member), and has returns a Boolean value indicating whether its argument is a member of the group.\nUse the === operator, or something equivalent such as indexOf, to determine whether two values are the same.\n\nHere are a few hints to help the viewer figure out the problem:\n\nThe easiest way to do this is to store an array of group members in an instance property. The includes or indexOf methods can be used to check whether a given value is in the array.\nYour class’s constructor can set the member collection to an empty array. When add is called, it must check whether the given value is in the array or add it, for example with push, otherwise.\nDeleting an element from an array, in delete, is less straightforward, but you can use filter to create a new array without the value. Don’t forget to overwrite the property holding the members with the newly filtered version of the array.\nThe from method can use a for/of loop to get the values out of the iterable object and call add to put them into a newly created group.\n\n\nIn the remainder of the article we provide a detailed explanation of the solution-code.\n\n\nThe constructor method is a special method of a class for creating and initializing an object instance of that class. The purpose of a constructor is to create a new object and set values for any existing object properties.\nconstructor() {\n    this.members = [];\nThe add function returns a function. So when you call this: add (); what happens is the code ( ++i) executes and a function is returned. JavaScript, the exclamation mark (!) is a logical operator that negates the truth value of an expression. The push() method of Array instances adds the specified elements to the end of an array and returns the new length of the array.\nadd(value) {\n    if (!this.has(value)) {\n      this.members.push(value);\n    }\n}\n\n\n\nIn JavaScript, the delete operator is used to remove a property from an object. If the property’s value is an object and there are no more references to the object, the object held by that property is eventually released automatically. In addition, filter() is a built-in method that allows you to create a new array with all elements that pass a certain test provided by a function. The original array is not modified. Finally, The !== operator in JavaScript is called the strict inequality operator. It checks whether its two operands are not equal and returns a Boolean result.\ndelete(value) {\n    this.members = this.members.filter(v =&gt; v !== value);\n  }\n\n\n\nIn JavaScript, has is a method that is used to check whether a Set object contains a specified element or not. The has method returns a boolean value of true if the element is present in the Set object, and false otherwise.\nhas(value) {\n    return this.members.includes(value);\n  }\n\n\n\nA static variable is a special variable that you can use in a function, and it saves the data between calls, and it does not delete it between calls. The let, for, and return functions still provide the same outcomes as stated earlier.\nstatic from(collection) {\n    let group = new Group;\n    for (let value of collection) {\n      group.add(value);\n    }\n    return group;\n  }\nWe are done!"
  },
  {
    "objectID": "articles/article_02.html#full-code",
    "href": "articles/article_02.html#full-code",
    "title": "Chapter 06 : Groups",
    "section": "Full Code",
    "text": "Full Code\nThe following code is the full code to “Groups” put together.\nclass Group {\n  constructor() {\n    this.members = [];\n  }\n\n  add(value) {\n    if (!this.has(value)) {\n      this.members.push(value);\n    }\n  }\n\n  delete(value) {\n    this.members = this.members.filter(v =&gt; v !== value);\n  }\n\n  has(value) {\n    return this.members.includes(value);\n  }\n\n  static from(collection) {\n    let group = new Group;\n    for (let value of collection) {\n      group.add(value);\n    }\n    return group;\n  }\n}"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello, I’m Alex Kincer. I’m a sophomore at Georgetown College and I am on a cheerleading scholarship. Currently, I am a Chemistry major with a Computer Science minor."
  },
  {
    "objectID": "about.html#family",
    "href": "about.html#family",
    "title": "About Me",
    "section": "Family",
    "text": "Family\n\nI am one of the youngest daughters to Georgie and Keith Kincer. I have 3 older sisters, Freddi, Leanna, and Cameron, and a twin sister, Bailey. My older sisters went to Midway University, the University of Pikeville, and Southeast Community and Technical College to earn degrees in Marketing and Nursing. My twin sister is a current sophomore at the University of the Cumberlands and is pursuing a degree in Psychology. Though all of us are pursuing different paths of life, we each continued or are still continuing our athletic careers. Freddi and Leanna ran Track and Cross Country, Cameron played Soccer, Bailey in playing Volleyball, and I am on the Competitive Cheerleading team."
  },
  {
    "objectID": "about.html#early-life",
    "href": "about.html#early-life",
    "title": "About Me",
    "section": "Early Life",
    "text": "Early Life\n\nI am originally from Neon, Kentucky and have lived there my entire life. Both of my parents grew up in Neon, and met when my mother was in the 7th grade, and have been together ever since. My grandparents still live in Neon, right beside of my parents, actually. Neon is as eastern as you can get, being less than 10 minutes from the Virginia line. Being that close to Virginia, I have always been surrounded by mountains, so Georgetown was a very different atmosphere. If the description above hasn’t given you an idea of where I’m from, I was greatly affected in the Summer of 2022 Eastern Kentucky flooding.\n\nThe photo above was taken from my grandparents’ front porch the morning after the first round of flooding. Due to being from the poverend area of Appalachia and the now flooded area, I longed to get out of the mountains and make something of myself that would put me in the place to not need to move back. I love where I am from, and my family will always be there, but the mountains are not my forver home."
  },
  {
    "objectID": "about.html#why-georgetown",
    "href": "about.html#why-georgetown",
    "title": "About Me",
    "section": "Why Georgetown?",
    "text": "Why Georgetown?\nWhen choosing a college, my top 3 requirements were that it had to be atleast 2 hours away, offer me a cheerleading scholarship, and have a good chemistry program. I visited Georgetown College in the Fall of 2021 for a cheerleading clinic and absolutely loved it. After the clinic was over, Coach Joanie conversed with my parents and I and made an official offer for me to continue my athletic career. Georgetown checked all the boxes with being a little over 3 hours away from home."
  },
  {
    "objectID": "about.html#life-at-georgetown",
    "href": "about.html#life-at-georgetown",
    "title": "About Me",
    "section": "Life At Georgetown",
    "text": "Life At Georgetown\nAt Georgetown, I have pursued my interest in Chemistry and continued to progress in the sport of Competitive Cheerleading. In my first year, I completed General Chemistry 1 and 2 with labs corresponding, and completed Computer Science Course 115. In cheerleading, I made the competition squad, competiting in 6 total competitions and winning GC’s 3rd consecutive Mid-South Conference Title. I also cheered all mens basketball games and home football games. In my second year, so far, I have made the competition team, again, and have cheered at Rupp Arena for mens basketball exhibition and cheered all home football games thus far.\n\nIn the picture to the right, you can see me in a stunt at a recent football game. I have just recently been switched positions to a flyer on the team and have, so far, been very successful. I genuinely love cheerleading, and hope to continue GC’s cheer legacy while I am here."
  },
  {
    "objectID": "articles/article_01.html",
    "href": "articles/article_01.html",
    "title": "Chapter 04 : The Sum of Range",
    "section": "",
    "text": "Introduction to the Problem\nThe introduction of the Eloquent Javascript book frequently calls attention to objects and arrays. Chapter 4 discusses the properties within these subjects and indirectly expemplifies how to compute the sum of a range of numbers:\n\n\nconsole.log(sum(range(1, 10)));\n\n\n\n\nWrite a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end.\nNext, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example program and see whether it does indeed return 55.\n\nHere are a few hints to help the viewer figure out the problem:\n\nBuilding up an array is most easily done by first initializing a binding to [] (a fresh, empty array) and repeatedly calling its push method to add a value. Don’t forget to return the array at the end of the function.\nSince the end boundary is inclusive, you’ll need to use the &lt;= operator rather than &lt; to check for the end of your loop.\nThe step parameter can be an optional parameter that defaults (using the = operator)to 1.\nHaving range understand negative step values is probably best done by writing two separate loops—one for counting up and one for counting down—because the comparison that checks whether the loop is finished needs to be &gt;= rather than &lt;= when counting downward.\nIt might also be worthwhile to use a different default step, namely, -1, when the end of the range is smaller than the start. That way, range(5, 2) returns something meaningful, rather than getting stuck in an infinite loop. It is possible to refer to previous parameters in the default value of a parameter.\n\n\nIn the remainder of the article we provide a detailed explanation of the solution-code.\n\n\nGenerating the Range\nWhen specifying three integers as range (start, stop, step), it generates a series of numbers start &lt;= i &lt; stop, increasing by step. If you provide a negative value for the step argument, the sequence will decrease.\n{function range(start, end, step = start &lt; end ? 1 : -1)}\n\n\nStep One : Creating the Array\nThe let declaration declares re-assignable, block-scoped local variables, optionally initializing each to a value. In JavaScript, arrays aren’t primitives but are instead Array objects with the following core characteristics: JavaScript arrays are resizable and can contain a mix of different data types.\nlet array = [];\nWe can now apply the if else function :\nUse the if statement to specify a block of JavaScript code to be executed if a condition is true. Use the else statement to specify a block of code to be executed if the condition is false.\n if (step &gt; 0) {\n    for (let i = start; i &lt;= end; i += step) array.push(i);\n  } else {\n    for (let i = start; i &gt;= end; i += step) array.push(i);\n  }\nThe above information from the If else function will then be returned to create the arrays beginning.\n\n\nStep Two : Return & Close\nThe return statement is used when a function is ready to return a value to its caller. A } bracket is entered at the end of the code to draw an imaginary line at the end of the coding sequence. This makes sure to keep the things that go together, together.\nreturn array;\n}\n\n\nStep Three : Beginning the Next Function\nThe SUM function is a mathematical function that totals the values supplied to it. These values can be numbers, cell references, ranges, arrays, or constants. The function can handle up to 255 individual arguments. The SUM function ignores records that contain Null fields. The function is entered by typing =SUM followed by the values to be summed. Adding the ‘(array)’ after the SUM call, indicates that the array will be what the call is applied to.\nYou then place a “{” to open up the coding area for what is to come after to complete this problem.\nfunction sum(array) {\nWe now apply another ‘let’ call and add the ‘for’ function :\nIn JavaScript, the for statement is used to execute a block of code repeatedly. The for loop has three optional expressions: initialization, condition, and final-expression.\nlet total = 0;\n  for (let value of array) {\n    total += value;\n  }\nThe += operator in JavaScript is called the addition assignment operator. It performs addition on the two operands and assigns the result to the left operand. The expression x += y is equivalent to x = x + y, except that the expression x is only evaluated once. The operator can perform either numeric addition or string concatenation, depending on the types of the operands.\n\n\nFinal Step : Returning the Total\nOne by one, we piece each chunk of coding together and, finally, we return the total value:\nreturn total;\nWe are done!\n\n\nFull Code\nThe following code is the full code to “The Range of Sum” put together.\nfunction range(start, end, step = start &lt; end ? 1 : -1) {\n  let array = [];\n\n  if (step &gt; 0) {\n    for (let i = start; i &lt;= end; i += step) array.push(i);\n  } else {\n    for (let i = start; i &gt;= end; i += step) array.push(i);\n  }\n  return array;\n}\n\nfunction sum(array) {\n  let total = 0;\n  for (let value of array) {\n    total += value;\n  }\n  return total;\n}"
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "Articles on site."
  }
]