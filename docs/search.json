[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!!",
    "section": "",
    "text": "Welcome to my Quarto Warmup Website. This serves as a warmup site for CSC 324 at Georgetown College.\nYou can read a bit about me here.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello, I’m Alex Kincer. I’m a sophomore at Georgetown College and I am on a cheerleading scholarship. Currently, I am a Chemistry major with a Computer Science minor."
  },
  {
    "objectID": "about.html#family",
    "href": "about.html#family",
    "title": "About Me",
    "section": "Family",
    "text": "Family\n\nI am one of the youngest daughters to Georgie and Keith Kincer. I have 3 older sisters, Freddi, Leanna, and Cameron, and a twin sister, Bailey. My older sisters went to Midway University, the University of Pikeville, and Southeast Community and Technical College to earn degrees in Marketing and Nursing. My twin sister is a current sophomore at the University of the Cumberlands and is pursuing a degree in Psychology. Though all of us are pursuing different paths of life, we each continued or are still continuing our athletic careers. Freddi and Leanna ran Track and Cross Country, Cameron played Soccer, Bailey in playing Volleyball, and I am on the Competitive Cheerleading team."
  },
  {
    "objectID": "about.html#early-life",
    "href": "about.html#early-life",
    "title": "About Me",
    "section": "Early Life",
    "text": "Early Life\n\nI am originally from Neon, Kentucky and have lived there my entire life. Both of my parents grew up in Neon, and met when my mother was in the 7th grade, and have been together ever since. My grandparents still live in Neon, right beside of my parents, actually. Neon is as eastern as you can get, being less than 10 minutes from the Virginia line. Being that close to Virginia, I have always been surrounded by mountains, so Georgetown was a very different atmosphere. If the description above hasn’t given you an idea of where I’m from, I was greatly affected in the Summer of 2022 Eastern Kentucky flooding.\n\nThe photo above was taken from my grandparents’ front porch the morning after the first round of flooding. Due to being from the poverend area of Appalachia and the now flooded area, I longed to get out of the mountains and make something of myself that would put me in the place to not need to move back. I love where I am from, and my family will always be there, but the mountains are not my forver home."
  },
  {
    "objectID": "about.html#why-georgetown",
    "href": "about.html#why-georgetown",
    "title": "About Me",
    "section": "Why Georgetown?",
    "text": "Why Georgetown?\nWhen choosing a college, my top 3 requirements were that it had to be atleast 2 hours away, offer me a cheerleading scholarship, and have a good chemistry program. I visited Georgetown College in the Fall of 2021 for a cheerleading clinic and absolutely loved it. After the clinic was over, Coach Joanie conversed with my parents and I and made an official offer for me to continue my athletic career. Georgetown checked all the boxes with being a little over 3 hours away from home."
  },
  {
    "objectID": "about.html#life-at-georgetown",
    "href": "about.html#life-at-georgetown",
    "title": "About Me",
    "section": "Life At Georgetown",
    "text": "Life At Georgetown\nAt Georgetown, I have pursued my interest in Chemistry and continued to progress in the sport of Competitive Cheerleading. In my first year, I completed General Chemistry 1 and 2 with labs corresponding, and completed Computer Science Course 115. In cheerleading, I made the competition squad, competiting in 6 total competitions and winning GC’s 3rd consecutive Mid-South Conference Title. I also cheered all mens basketball games and home football games. In my second year, so far, I have made the competition team, again, and have cheered at Rupp Arena for mens basketball exhibition and cheered all home football games thus far.\n\nIn the picture to the right, you can see me in a stunt at a recent football game. I have just recently been switched positions to a flyer on the team and have, so far, been very successful. I genuinely love cheerleading, and hope to continue GC’s cheer legacy while I am here."
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "Articles on site."
  },
  {
    "objectID": "articles/article_01.html",
    "href": "articles/article_01.html",
    "title": "Chapter 04 : The Sum of Range",
    "section": "",
    "text": "The introduction of the Eloquent Javascript book frequently calls attention to objects and arrays. Chapter 4 discusses the properties within these subjects and indirectly expemplifies how to compute the sum of a range of numbers:\n\n\nconsole.log(sum(range(1, 10)));\n\n\n\n\nWrite a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end.\nNext, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example program and see whether it does indeed return 55.\n\nHere are a few hints to help the viewer figure out the problem:\n\nBuilding up an array is most easily done by first initializing a binding to [] (a fresh, empty array) and repeatedly calling its push method to add a value. Don’t forget to return the array at the end of the function.\nSince the end boundary is inclusive, you’ll need to use the &lt;= operator rather than &lt; to check for the end of your loop.\nThe step parameter can be an optional parameter that defaults (using the = operator)to 1.\nHaving range understand negative step values is probably best done by writing two separate loops—one for counting up and one for counting down—because the comparison that checks whether the loop is finished needs to be &gt;= rather than &lt;= when counting downward.\nIt might also be worthwhile to use a different default step, namely, -1, when the end of the range is smaller than the start. That way, range(5, 2) returns something meaningful, rather than getting stuck in an infinite loop. It is possible to refer to previous parameters in the default value of a parameter.\n\n\nIn the remainder of the article we provide a detailed explanation of the solution-code."
  },
  {
    "objectID": "articles/article_01.html#introduction-to-the-problem",
    "href": "articles/article_01.html#introduction-to-the-problem",
    "title": "Chapter 04 : The Sum of Range",
    "section": "",
    "text": "The introduction of the Eloquent Javascript book frequently calls attention to objects and arrays. Chapter 4 discusses the properties within these subjects and indirectly expemplifies how to compute the sum of a range of numbers:\n\n\nconsole.log(sum(range(1, 10)));\n\n\n\n\nWrite a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end.\nNext, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example program and see whether it does indeed return 55.\n\nHere are a few hints to help the viewer figure out the problem:\n\nBuilding up an array is most easily done by first initializing a binding to [] (a fresh, empty array) and repeatedly calling its push method to add a value. Don’t forget to return the array at the end of the function.\nSince the end boundary is inclusive, you’ll need to use the &lt;= operator rather than &lt; to check for the end of your loop.\nThe step parameter can be an optional parameter that defaults (using the = operator)to 1.\nHaving range understand negative step values is probably best done by writing two separate loops—one for counting up and one for counting down—because the comparison that checks whether the loop is finished needs to be &gt;= rather than &lt;= when counting downward.\nIt might also be worthwhile to use a different default step, namely, -1, when the end of the range is smaller than the start. That way, range(5, 2) returns something meaningful, rather than getting stuck in an infinite loop. It is possible to refer to previous parameters in the default value of a parameter.\n\n\nIn the remainder of the article we provide a detailed explanation of the solution-code."
  },
  {
    "objectID": "articles/article_01.html#reading-in-the-data",
    "href": "articles/article_01.html#reading-in-the-data",
    "title": "Chapter 04 : The Sum of Range",
    "section": "Reading in the Data",
    "text": "Reading in the Data\nSuppose that the problem data is contained in a file called input.txt located in the same dirctory as the JavaScript file, for example:\n\n\ninput.txt\n\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\n\nWe will be importing data from a source outside the Node envionment, so we’ll be working with file-systems. Accordingly, we import the fs and path modules:\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nDetermining the Pathname of the Input File\nWe now use the functionality of the path module to construct a string that gives the pathname of the input.txt file.\nlet targetFile = path.resolve(__dirname, \"input.txt\");\nIn the above code, __dirname evaluates to the full name of the directory containing the file being run, and path.resolve puts it together with the second argument to get the full pathnamename of the input file.\n\n\nReading in the Input File\nNext, we use the fs module tp read in the file, and the we and convert it to a string:\nconst input = fs.readFileSync(targetFile).toString();\n\n\nProcessing the Input File\nWe wish to convert the string into an array of values, where each element of the array is the calorie-value of an item.\nTo this end, we must split the string along the newlines within it. To this end we define a splitting function:\nconst splitLines = str =&gt; str.split(/\\n/);\nNote the use of the Javacript regular expression /\\n/). (In Javascript regular expressions to not start life as strings, as they do in R. Instead they are a special type of object, delimited by the forward-slash: /. For more on regular expressions in JavaScript, see Chapter 8 of the Eloquent JavaScript textbook.)\nWe now apply the function to split the input into an array of strings;\nconst caloriesAsStrings = splitLines(input);\nThe array is full of strings. (Some of them are the empty strinf—wherever there were two consecutive newlines in the oringal input to separate the pack of one elf from the pack of the next elf.)\nWe need to convert them to numbers. To that end, we apply the higher-order array-method map() to the caloriesAsStrings:\nconst calories = caloriesAsStrings.map(str =&gt; parseInt(str));\nIt is important to note that parseInt() converts the empty string to the value NaN: “not a number”."
  },
  {
    "objectID": "articles/article_01.html#looping-to-compute-pack-totals",
    "href": "articles/article_01.html#looping-to-compute-pack-totals",
    "title": "Chapter 04 : The Sum of Range",
    "section": "Looping to Compute Pack-Totals",
    "text": "Looping to Compute Pack-Totals\nThe array calories consists of calorie counts, with NaNs separatng items in different packs. We’ll work with this array to find the sums of the calorie-counts in each pack.\nFirst, we make an array to hold the total calories for each pack:\nconst packTotals = [];\nOne by one, we pull items from the beginning of the calories array, making the pack totals:\nwhile (calories.length &gt; 0) {\n  let packTotal = 0;\n  let currentItem = calories.shift();\n  while (!isNaN(currentItem)) {\n    packTotal += currentItem;\n    currentItem = calories.shift();\n  }\n  packTotals.push(packTotal);\n};\npackTotals is now an array of the total calories in each pack."
  },
  {
    "objectID": "articles/article_01.html#reporting-the-maximum-pack-total",
    "href": "articles/article_01.html#reporting-the-maximum-pack-total",
    "title": "Chapter 04 : The Sum of Range",
    "section": "Reporting the Maximum Pack-Total",
    "text": "Reporting the Maximum Pack-Total\nFinally, we compute the maximum of the pack totals:\nlet maxPackTotal = Math.max(...packTotals);\n(Math.max() takes as arguments all of the numbers of whihc we wish to find the maximum. Note the use of the three-dot notation notation ... to convert the single array into separate arguments. For a review of the three-dot notation, see the section Rest Parameters in Eloquent JavaScript. )\nFinally, we return the total value:\nreturn total;\nWe are done!"
  },
  {
    "objectID": "articles/article_01.html#full-code",
    "href": "articles/article_01.html#full-code",
    "title": "Chapter 04 : The Sum of Range",
    "section": "Full Code",
    "text": "Full Code\nThe following code is the full code to “The Range of Sum” put together.\nfunction range(start, end, step = start &lt; end ? 1 : -1) {\n  let array = [];\n\n  if (step &gt; 0) {\n    for (let i = start; i &lt;= end; i += step) array.push(i);\n  } else {\n    for (let i = start; i &gt;= end; i += step) array.push(i);\n  }\n  return array;\n}\n\nfunction sum(array) {\n  let total = 0;\n  for (let value of array) {\n    total += value;\n  }\n  return total;\n}"
  },
  {
    "objectID": "articles/article_02.html",
    "href": "articles/article_02.html",
    "title": "Chapter 06 : Groups",
    "section": "",
    "text": "The standard JavaScript environment provides another data structure called Set. Like an instance of Map, a set holds a collection of values. Unlike Map, it does not associate other values with those—it just tracks which values are part of the set. A value can be part of a set only once—adding it again doesn’t have any effect.This is how your solution code will begin to format the rest of the variables into a collection.\n{class Group {   // Your code here. }}\n\nWrite a class called Group (since Set is already taken). Like Set, it has add, delete, and has methods. Its constructor creates an empty group, add adds a value to the group (but only if it isn’t already a member), delete removes its argument from the group (if it was a member), and has returns a Boolean value indicating whether its argument is a member of the group.\nUse the === operator, or something equivalent such as indexOf, to determine whether two values are the same.\n\nHere are a few hints to help the viewer figure out the problem:\n\nThe easiest way to do this is to store an array of group members in an instance property. The includes or indexOf methods can be used to check whether a given value is in the array.\nYour class’s constructor can set the member collection to an empty array. When add is called, it must check whether the given value is in the array or add it, for example with push, otherwise.\nDeleting an element from an array, in delete, is less straightforward, but you can use filter to create a new array without the value. Don’t forget to overwrite the property holding the members with the newly filtered version of the array.\nThe from method can use a for/of loop to get the values out of the iterable object and call add to put them into a newly created group.\n\n\nIn the remainder of the article we provide a detailed explanation of the solution-code.\nexplaining and individual coding here\nWe are done!"
  },
  {
    "objectID": "articles/article_02.html#introduction-to-the-problem",
    "href": "articles/article_02.html#introduction-to-the-problem",
    "title": "Chapter 06 : Groups",
    "section": "",
    "text": "The standard JavaScript environment provides another data structure called Set. Like an instance of Map, a set holds a collection of values. Unlike Map, it does not associate other values with those—it just tracks which values are part of the set. A value can be part of a set only once—adding it again doesn’t have any effect.This is how your solution code will begin to format the rest of the variables into a collection.\n{class Group {   // Your code here. }}\n\nWrite a class called Group (since Set is already taken). Like Set, it has add, delete, and has methods. Its constructor creates an empty group, add adds a value to the group (but only if it isn’t already a member), delete removes its argument from the group (if it was a member), and has returns a Boolean value indicating whether its argument is a member of the group.\nUse the === operator, or something equivalent such as indexOf, to determine whether two values are the same.\n\nHere are a few hints to help the viewer figure out the problem:\n\nThe easiest way to do this is to store an array of group members in an instance property. The includes or indexOf methods can be used to check whether a given value is in the array.\nYour class’s constructor can set the member collection to an empty array. When add is called, it must check whether the given value is in the array or add it, for example with push, otherwise.\nDeleting an element from an array, in delete, is less straightforward, but you can use filter to create a new array without the value. Don’t forget to overwrite the property holding the members with the newly filtered version of the array.\nThe from method can use a for/of loop to get the values out of the iterable object and call add to put them into a newly created group.\n\n\nIn the remainder of the article we provide a detailed explanation of the solution-code.\nexplaining and individual coding here\nWe are done!"
  },
  {
    "objectID": "articles/article_02.html#full-code",
    "href": "articles/article_02.html#full-code",
    "title": "Chapter 06 : Groups",
    "section": "Full Code",
    "text": "Full Code\nThe following code is the full code to “Groups” put together.\nclass Group {\n  constructor() {\n    this.members = [];\n  }\n\n  add(value) {\n    if (!this.has(value)) {\n      this.members.push(value);\n    }\n  }\n\n  delete(value) {\n    this.members = this.members.filter(v =&gt; v !== value);\n  }\n\n  has(value) {\n    return this.members.includes(value);\n  }\n\n  static from(collection) {\n    let group = new Group;\n    for (let value of collection) {\n      group.add(value);\n    }\n    return group;\n  }\n}\n\nlet group = Group.from([10, 20]);\nconsole.log(group.has(10));\n// → true\nconsole.log(group.has(30));\n// → false\ngroup.add(10);\ngroup.delete(10);\nconsole.log(group.has(10));"
  }
]