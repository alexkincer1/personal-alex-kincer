---
title: "Chapter 04 : The Sum of Range"
---

## Introduction to the Problem

The introduction of the Eloquent Javascript book frequently calls attention to objects and arrays. Chapter 4 discusses the properties within these subjects and indirectly expemplifies how to compute the sum of a range of numbers:

```{filename="console.log(sum(range(1, 10)));"}
```


<blockquote>
Write a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end.

Next, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example program and see whether it does indeed return 55.
```

```
Here are a few hints to help the viewer figure out the problem:

* Building up an array is most easily done by first initializing a binding to [] (a fresh, empty array) and repeatedly calling its push method to add a value. Don’t forget to return the array at the end of the function.

* Since the end boundary is inclusive, you’ll need to use the <= operator rather than < to check for the end of your loop.

* The step parameter can be an optional parameter that defaults (using the = operator)to 1.

* Having range understand negative step values is probably best done by writing two separate loops—one for counting up and one for counting down—because the comparison that checks whether the loop is finished needs to be >= rather than <= when counting downward.

* It might also be worthwhile to use a different default step, namely, -1, when the end of the range is smaller than the start. That way, range(5, 2) returns something meaningful, rather than getting stuck in an infinite loop. It is possible to refer to previous parameters in the default value of a parameter.


</blockquote>

In the remainder of the article we provide a detailed explanation of the solution-code.

## Reading in the Data

Suppose that the problem data is contained in a file called `input.txt` located in the same dirctory as the JavaScript file, for example:

```{filename="input.txt"}
1000
2000
3000

4000

5000
6000

7000
8000
9000

10000
```

We will be importing data from a source outside the Node envionment, so we'll be working with file-systems.  Accordingly, we import the `fs` and `path` modules:

```js
const fs = require("fs");
const path = require("path");
```

### Determining the Pathname of the Input File

We now use the functionality of the `path` module to construct a string that gives the pathname of the `input.txt` file.  

```.js
let targetFile = path.resolve(__dirname, "input.txt");
```

In the above code, `__dirname` evaluates to the full name of the directory containing the file being run, and `path.resolve` puts it together with the second argument
to get the full pathnamename of the input file.

### Reading in the Input File

Next, we use the `fs` module tp read in the file, and the we and convert it to a string:

```js
const input = fs.readFileSync(targetFile).toString();
```

### Processing the Input File

We wish to convert the string into an array of values, where each element of the array is the calorie-value of an item.

To this end, we must split the string along the newlines within it.  To this end we define a splitting function:

```js
const splitLines = str => str.split(/\n/);
```

Note the use of the Javacript regular expression `/\n/`).  (In Javascript regular expressions to not start life as strings, as they do in R.  Instead they are a special type of object, delimited by the forward-slash: `/`.  For more on regular expressions in JavaScript, see [Chapter 8](https://eloquentjavascript.net/09_regexp.html) of the *Eloquent JavaScript* textbook.)

We now apply the function to split the input into an array of strings;

```js
const caloriesAsStrings = splitLines(input);
```

The array is full of strings.  (Some of them are the empty strinf---wherever there were two consecutive newlines in the oringal input to separate the pack of one elf from the pack of the next elf.)

We need to convert them to numbers.  To that end, we apply the higher-order array-method `map()` to the `caloriesAsStrings`:

```js
const calories = caloriesAsStrings.map(str => parseInt(str));
```

It is important to note that `parseInt()` converts the empty string to the value `NaN`:  "not a number".

## Looping to Compute Pack-Totals

The array `calories` consists of calorie counts, with `NaNs` separatng items in different packs.  We'll work with this array to find the sums of the calorie-counts in each pack.

First, we make an array to hold the total calories for each pack:

```js
const packTotals = [];
```


One by one, we pull items from the beginning of the calories array, making the pack totals:

```js
while (calories.length > 0) {
  let packTotal = 0;
  let currentItem = calories.shift();
  while (!isNaN(currentItem)) {
    packTotal += currentItem;
    currentItem = calories.shift();
  }
  packTotals.push(packTotal);
};
```

`packTotals` is now an array of the total calories in each pack.

## Reporting the Maximum Pack-Total

Finally, we compute the maximum of the pack totals:

```js
let maxPackTotal = Math.max(...packTotals);
```

(Math.max() takes as arguments all of the numbers of whihc we wish to find the maximum.  Note the use of the three-dot notation notation `...` to convert the single array into separate arguments. For a review of the three-dot notation, see the section [Rest Parameters](https://eloquentjavascript.net/04_data.html#h_hX9DkIBp9y) in *Eloquent JavaScript*. )

Finally, we return the total value:

```js
return total;
```

We are done!

## Full Code

The following code is the full code to "The Range of Sum" put together.

```js
function range(start, end, step = start < end ? 1 : -1) {
  let array = [];

  if (step > 0) {
    for (let i = start; i <= end; i += step) array.push(i);
  } else {
    for (let i = start; i >= end; i += step) array.push(i);
  }
  return array;
}

function sum(array) {
  let total = 0;
  for (let value of array) {
    total += value;
  }
  return total;
}
```
