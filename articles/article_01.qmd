---
title: "Chapter 04 : The Sum of Range"
---

### Introduction to the Problem

The introduction of the Eloquent Javascript book frequently calls attention to objects and arrays. Chapter 4 discusses the properties within these subjects and indirectly expemplifies how to compute the sum of a range of numbers:

```{filename="console.log(sum(range(1, 10)));"}
```


<blockquote>
Write a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end.

Next, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example program and see whether it does indeed return 55. 
```

```
Here are a few hints to help the viewer figure out the problem:

* Building up an array is most easily done by first initializing a binding to [] (a fresh, empty array) and repeatedly calling its push method to add a value. Don’t forget to return the array at the end of the function.

* Since the end boundary is inclusive, you’ll need to use the <= operator rather than < to check for the end of your loop.

* The step parameter can be an optional parameter that defaults (using the = operator)to 1.

* Having range understand negative step values is probably best done by writing two separate loops—one for counting up and one for counting down—because the comparison that checks whether the loop is finished needs to be >= rather than <= when counting downward.

* It might also be worthwhile to use a different default step, namely, -1, when the end of the range is smaller than the start. That way, range(5, 2) returns something meaningful, rather than getting stuck in an infinite loop. It is possible to refer to previous parameters in the default value of a parameter.


</blockquote>

In the remainder of the article we provide a detailed explanation of the solution-code.

### Generating the Range

When specifying three integers as range (start, stop, step), it generates a series of numbers start <= i < stop, increasing by step. If you provide a negative value for the step argument, the sequence will decrease. 

```{function range(start, end, step = start < end ? 1 : -1)}
```

### Step One : Creating the Array

The let declaration declares re-assignable, block-scoped local variables, optionally initializing each to a value. 
In JavaScript, arrays aren't primitives but are instead Array objects with the following core characteristics: JavaScript arrays are resizable and can contain a mix of different data types. 

```js
let array = [];
```

We can now apply the if else function :

Use the if statement to specify a block of JavaScript code to be executed if a condition is true. Use the else statement to specify a block of code to be executed if the condition is false.  

```js 
 if (step > 0) {
    for (let i = start; i <= end; i += step) array.push(i);
  } else {
    for (let i = start; i >= end; i += step) array.push(i);
  }
```

The above information from the If else function will then be returned to create the arrays beginning.

### Step Two : Return & Close

The return statement is used when a function is ready to return a value to its caller. A } bracket is entered at the end of the code to draw an imaginary line at the end of the coding sequence. This makes sure to keep the things that go together, together.

```js
return array;
}
```

### Step Three : Beginning the Next Function

The SUM function is a mathematical function that totals the values supplied to it. These values can be numbers, cell references, ranges, arrays, or constants. The function can handle up to 255 individual arguments. The SUM function ignores records that contain Null fields. The function is entered by typing =SUM followed by the values to be summed. Adding the '(array)' after the SUM call, indicates that the array will be what the call is applied to.

You then place a "{" to open up the coding area for what is to come after to complete this problem.

```js
function sum(array) {
```

We now apply another 'let' call and add the 'for' function :


In JavaScript, the for statement is used to execute a block of code repeatedly. The for loop has three optional expressions: initialization, condition, and final-expression.  

```js
let total = 0;
  for (let value of array) {
    total += value;
  }
```

The += operator in JavaScript is called the addition assignment operator. It performs addition on the two operands and assigns the result to the left operand. The expression x += y is equivalent to x = x + y, except that the expression x is only evaluated once. The operator can perform either numeric addition or string concatenation, depending on the types of the operands.


### Final Step : Returning the Total 

One by one, we piece each chunk of coding together and, finally, we return the total value:

```js
return total;
```

We are done!

### Full Code

The following code is the full code to "The Range of Sum" put together.

```js
function range(start, end, step = start < end ? 1 : -1) {
  let array = [];

  if (step > 0) {
    for (let i = start; i <= end; i += step) array.push(i);
  } else {
    for (let i = start; i >= end; i += step) array.push(i);
  }
  return array;
}

function sum(array) {
  let total = 0;
  for (let value of array) {
    total += value;
  }
  return total;
}
```
