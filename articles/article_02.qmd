---
title: "Chapter 06 : Groups"
---

## Introduction to the Problem

The standard JavaScript environment provides another data structure called Set. Like an instance of Map, a set holds a collection of values. Unlike Map, it does not associate other values with those—it just tracks which values are part of the set. A value can be part of a set only once—adding it again doesn’t have any effect.This is how your solution code will begin to format the rest of the variables into a collection.

```{class Group {
  // Your code here.
}}
```


<blockquote>

Write a class called Group (since Set is already taken). Like Set, it has add, delete, and has methods. Its constructor creates an empty group, add adds a value to the group (but only if it isn’t already a member), delete removes its argument from the group (if it was a member), and has returns a Boolean value indicating whether its argument is a member of the group.

Use the === operator, or something equivalent such as indexOf, to determine whether two values are the same.
```

```
Here are a few hints to help the viewer figure out the problem:

* The easiest way to do this is to store an array of group members in an instance property. The includes or indexOf methods can be used to check whether a given value is in the array.

* Your class’s constructor can set the member collection to an empty array. When add is called, it must check whether the given value is in the array or add it, for example with push, otherwise.

* Deleting an element from an array, in delete, is less straightforward, but you can use filter to create a new array without the value. Don’t forget to overwrite the property holding the members with the newly filtered version of the array.

* The from method can use a for/of loop to get the values out of the iterable object and call add to put them into a newly created group.


</blockquote>

In the remainder of the article we provide a detailed explanation of the solution-code.

### Step One : Beginning the Coding

The constructor method is a special method of a class for creating and initializing an object instance of that class. The purpose of a constructor is to create a new object and set values for any existing object properties.


```js
constructor() {
    this.members = [];
```

The add function returns a function. So when you call this: add (); what happens is the code ( ++i) executes and a function is returned. JavaScript, the exclamation mark (!) is a logical operator that negates the truth value of an expression. The push() method of Array instances adds the specified elements to the end of an array and returns the new length of the array.


```js
add(value) {
    if (!this.has(value)) {
      this.members.push(value);
    }
}
``` 

### Step Two : Deleting and Filtering

In JavaScript, the delete operator is used to remove a property from an object. If the property’s value is an object and there are no more references to the object, the object held by that property is eventually released automatically. In addition, filter() is a built-in method that allows you to create a new array with all elements that pass a certain test provided by a function. The original array is not modified. Finally, The !== operator in JavaScript is called the strict inequality operator. It checks whether its two operands are not equal and returns a Boolean result.

```js
delete(value) {
    this.members = this.members.filter(v => v !== value);
  }
```

### Step Three : Has & Return

In JavaScript, has is a method that is used to check whether a Set object contains a specified element or not. The has method returns a boolean value of true if the element is present in the Set object, and false otherwise.

```js
has(value) {
    return this.members.includes(value);
  }
```

### Final Step :

A static variable is a special variable that you can use in a function, and it saves the data between calls, and it does not delete it between calls. The let, for, and return functions still provide the same outcomes as stated earlier.

```js
static from(collection) {
    let group = new Group;
    for (let value of collection) {
      group.add(value);
    }
    return group;
  }
```

We are done!

## Full Code

The following code is the full code to "Groups" put together.

```js
class Group {
  constructor() {
    this.members = [];
  }

  add(value) {
    if (!this.has(value)) {
      this.members.push(value);
    }
  }

  delete(value) {
    this.members = this.members.filter(v => v !== value);
  }

  has(value) {
    return this.members.includes(value);
  }

  static from(collection) {
    let group = new Group;
    for (let value of collection) {
      group.add(value);
    }
    return group;
  }
}
```
